To solve this issue, we can explicitly increase the specificity of the `.container div.item` selector or use the `!important` flag (although using `!important` is generally discouraged as it can lead to other maintainability issues) as a last resort.

Here's an example of a solution using a more specific selector:

```css
.container {
  width: 100%;
}

.container > div {
  width: 50%;
}

.container .item {
  width: 25%;
}

.container > div.item {
  width: 20%; /* Using a child selector to increase specificity */
}
```

By using the child selector `>` before `div`, we ensure that the rule only applies when `.item` is a direct child of the `.container` div, and thus avoids conflicts with `div` elements nested deeper within the `.container`.

If this approach doesn't work for specific cases, you might consider using the `!important` flag: 

```css
.container div.item {
  width: 20% !important; /* Less preferred solution */
}
```

However, using `!important` is a less preferred solution as it can make your CSS harder to maintain and debug in the long run.